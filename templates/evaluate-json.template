{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "This template creates an EC2 instance, an MSSQL Express Edition RDS instance and an S3 Bucket",
    "Parameters"               : {
        "RetainEvaluateS3" : {
            "Description" : "After you have deleted this Stack, do you want to retain or delete the Evaluate S3 where all your Evaluation Attachments are stored?",
            "Default"     : "No",
            "Type"        : "String",
            "AllowedValues" : [
                "Yes",
                "No"
            ],
            "ConstraintDescription" : "must specify Yes or No."
        },
        "RDPFrom"          : {
            "Description" : "Lockdown RDP access to the bastion host (default can be accessed from anywhere)",
            "Type"        : "String",
            "MinLength"   : "9",
            "MaxLength"   : "18",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "KeyName"          : {
            "Description" : "Name of an existing EC2 KeyPair",
            "Type"        : "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair"
        },
        "InstanceType"     : {
            "Description" : "Amazon EC2 instance type",
            "Type"        : "String",
            "Default"     : "m4.large",
            "AllowedValues" : [
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "DomainDNSName"    : {
            "Description" : "Fully qualified domain name (FQDN) of the forest root domain e.g. corp.example.com",
            "Type"        : "String",
            "MinLength"   : "3",
            "MaxLength"   : "25",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DBEvaluateUser"   : {
            "NoEcho"  : "false",
            "Description" : "The database non-admin account username",
            "Type"        : "String",
            "MinLength"   : "1",
            "MaxLength"   : "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters"
        },
        "DBEvaluatePassword" : {
            "NoEcho"  : "true",
            "Description" : "The database non-admin account password",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "41",
            "AllowedPattern" : "[a-zA-Z0-9].*",
            "ConstraintDescription" : "must contain only alphanumeric characters."
        },
        "DomainIPs"          : {
            "NoEcho"  : "false",
            "Description" : "Comma separated list of IP addresses of AD Domain",
            "Type"        : "String"
        },
        "DomainAdminUser"    : {
            "Description" : "User name for the account that will be added as Domain Administrator. This is separate from the default \"EC2 Administrator\" account",
            "Type"        : "String"
        },
        "DomainAdminPassword" : {
            "NoEcho"  : "true",
            "Description" : "Password of the Domain Administrator's account. This is separate from the default \"EC2 Administrator\" account",
            "Type"        : "String"
        },
        "DomainNetBiosName"   : {
            "Description" : "Netbios name for the domain, e.g. MYCOMPANY",
            "Type"        : "String"
        },
        "VpcId"               : {
            "Description" : "VPC Id",
            "Type"        : "AWS::EC2::VPC::Id"
        },
        "SubnetId"            : {
            "Description" : "Subnet Id, must be same CIDR that was supplied when ElasticSearch was deployed",
            "Type"        : "AWS::EC2::Subnet::Id"
        },
        "DBAdminUser"         : {
            "NoEcho"  : "false",
            "Description" : "The database admin account username",
            "Type"        : "String",
            "MinLength"   : "1",
            "MaxLength"   : "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters"
        },
        "DBAdminPassword"     : {
            "NoEcho"  : "true",
            "Description" : "The database admin account password",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "41",
            "AllowedPattern" : "[a-zA-Z0-9].*",
            "ConstraintDescription" : "must contain only alphanumeric characters"
        },
        "S3Bucket" : {
            "Type" : "String"
        },
        "ESDomain" : {
            "Type" : "String"
        },
        "S3EvaluateBucket" : {
            "Type" : "String",
            "Description" : "The name of a new bucket that will be used to store Attachments. The actual name will be evaluate-<AccountId>-<whatever-you-enter-here>, e.g. evaluate-344201342714-myNewBucket",
            "MinLength"   : "8",
            "MaxLength"   : "41",
            "AllowedPattern" : "[a-z0-9].*",
            "ConstraintDescription" : "Must not be empty, must begin with a letter and contain only alphanumeric, lowercase characters"
        },
        "webXface" : {
            "Type" : "String"
        },
        "ElasticIp" : {
            "Type" : "String"
        }
    },
    "Metadata"                 : {     
        "AWS::CloudFormation::Interface" : {		  		 
            "ParameterGroups" : [
                {
                    "Label" : {
                        "default" : "EC2 Configuration"
                    },
                    "Parameters" : [
                        "KeyName",
                        "InstanceType",
                        "VpcId",
                        "SubnetId",
                        "RDPFrom"
                    ]
                },
                {
                    "Label" : {
                        "default" : "Amazon RDS Configuration"
                    },
                    "Parameters" : [
                        "DBAdminUser",
                        "DBAdminPassword",
                        "DBEvaluateUser",
                        "DBEvaluatePassword"
                    ]
                },
                {
                    "Label" : {
                        "default" : "S3 Configuration"
                    },
                    "Parameters" : [                      
                        "RetainEvaluateS3",
                        "S3EvaluateBucket"
                    ]
                },
                {
                    "Label" : {
                        "default" : "Active Directory Configuration"
                    },
                    "Parameters" : [
                        "DomainDNSName",
                        "DomainIPs",
                        "DomainAdminUser",
                        "DomainAdminPassword",
                        "DomainNetBiosName"
                    ]
                }
            ],			 
            "ParameterLabels" : {
                "KeyName" : {
                    "default" : "Which Key should be used?"
                },
                "InstanceType" : {
                    "default" : "What EC2 size should be used?"
                },
                "VpcId"        : {
                    "default" : "Which VPC should this be deployed to?"
                },
                "RDPFrom"      : {
                    "default" : "RDP from"
                },
                "ESDomain"  : {
                    "default" : "What is the endpoint of ElasticSearch?"
                },               
                "RetainEvaluateS3" : {
                    "default" : "Retain Evaluate S3?"
                },
                "DBEvaluateUser"   : {
                    "default" : "Application database username"
                },
                "DBEvaluatePassword" : {
                    "default" : "Application database password"
                },
                "DBAdminUser"        : {
                    "default" : "Application database master username"
                },
                "DBAdminPassword"    : {
                    "default" : "Application database master password"
                },
                "DomainDNSName"      : {
                    "default" : "Domain DNS"
                },
                "DomainIPs"          : {
                    "default" : "Domain IPs"
                },
                "DomainAdminUser"    : {
                    "default" : "Domain Administrator username"
                },
                "DomainAdminPassword" : {
                    "default" : "Domain Administrator password"
                },
                "S3EvaluateBucket" : {
                    "default" : "Name of new bucket"
                }
            }
        }
    },
    "Conditions"               : {
        "RetainEvaluateS3" : {
            "Fn::Equals" : [
                {
                    "Ref" : "RetainEvaluateS3"
                },
                "Yes"
            ]
        },
        "DeleteEvaluateS3" : {
            "Fn::Equals" : [
                {
                    "Ref" : "RetainEvaluateS3"
                },
                "No"
            ]
        }
    },
    "Mappings"                 : {
        "AWSRegion2AMI" : {
            "us-east-1" : {
                "Windows2016DevAMI" : "ami-bb43f2c1"
            },
            "eu-central-1" : {
                "Windows2016DevAMI" : "ami-bb43f2c1"
            },
            "ap-southeast-2" : {
                "Windows2016DevAMI" : "ami-bb43f2c1"
            }
        }
    },
    "Resources"                : {
        "sqlExpress" : {
            "Type" : "AWS::RDS::DBInstance",
            "DeletionPolicy" : "Snapshot",
            "Properties"     : {
                "Tags" : [
                    {
                        "Key" : "APP-NAME",
                        "Value" : "E4AC"
                    },
                    {
                        "Key" : "VENDOR",
                        "Value" : "Qualtrak"
                    },
                    {
                        "Key" : "STAGE",
                        "Value" : "Production"
                    }
                ],
                "AllocatedStorage" : "100",
                "DBInstanceClass"  : "db.t2.medium",
                "Engine"           : "sqlserver-ex",
                "Iops"             : "1000",
                "MasterUsername"   : {
                    "Ref" : "DBAdminUser"
                },
                "MasterUserPassword" : {
                    "Ref" : "DBAdminPassword"
                },
                "BackupRetentionPeriod" : "0"
            }
        },        
        "rootRole"         : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies"                 : [
                    {
                        "PolicyName" : {
                            "Fn::Join" : [
                                "",
                                [
                                    "root-",
									{
                                        "Ref" : "AWS::AccountId"
                                    },
									"-",
                                    {
                                        "Ref" : "AWS::StackName"
                                    },
									"-",
                                    {
                                        "Ref" : "AWS::Region"
                                    }
                                ]
                            ]
                        },
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : "*",
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : "s3:*",
                                    "Resource" : "*"
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : "s3:ListBucket",
                                    "Resource" : [
                                        {
                                            "Fn::Join" : [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Fn::If" : [
                                                            "RetainEvaluateS3",
                                                            {
                                                                "Ref" : "S3BucketNameEvaluateRetain"
                                                            },
                                                            {
                                                                "Ref" : "S3BucketNameEvaluateDelete"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join" : [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref" : "S3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "s3:GetObject",
                                        "s3:PutObject"
                                    ],
                                    "Resource" : [
                                        {
                                            "Fn::Join" : [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Fn::If" : [
                                                            "RetainEvaluateS3",
                                                            {
                                                                "Ref" : "S3BucketNameEvaluateRetain"
                                                            },
                                                            {
                                                                "Ref" : "S3BucketNameEvaluateDelete"
                                                            }
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "s3:GetObject"
                                    ],
                                    "Resource" : [
                                        {
                                            "Fn::Join" : [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref" : "S3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "rootInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [
                    {
                        "Ref" : "rootRole"
                    }
                ]
            }
        },
        "windowsServer"       : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "files" : {
                            "c:\\cfn\\cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.windowsServer.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -s ",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            " -r windowsServer",
                                            " --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\install-environment-variables.ps1" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "### Create environment variables...\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-connect-s3\", \"",
                                            {
                                                "Ref" : "S3Bucket"
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-evaluate-s3\", \"",
                                            {
                                                "Fn::If" : [
                                                    "RetainEvaluateS3",
                                                    {
                                                        "Ref" : "S3BucketNameEvaluateRetain"
                                                    },
                                                    {
                                                        "Ref" : "S3BucketNameEvaluateDelete"
                                                    }
                                                ]
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-dns\", \"",
                                            {
                                                "Ref" : "ElasticIp"
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-db-sys-username\", \"",
                                            {
                                                "Ref" : "DBAdminUser"
                                            },
                                            "\", \"Machine\")\n",
                                            "c:\\temp\\EncryptPassAndSetAsEnvVar.ps1 -Var q-db-sys-password -Value ",
                                            {
                                                "Ref" : "DBAdminPassword"
                                            },
                                            "\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-db-username\", \"",
                                            {
                                                "Ref" : "DBEvaluateUser"
                                            },
                                            "\", \"Machine\")\n",
                                            "c:\\temp\\EncryptPassAndSetAsEnvVar.ps1 -Var q-db-password -Value ",
                                            {
                                                "Ref" : "DBEvaluatePassword"
                                            },
                                            "\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-db-dns\", \"",
                                            {
                                                "Fn::GetAtt" : [
                                                    "sqlExpress",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-sku\", \"E4AC\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-db-port\", \"",
                                            {
                                                "Fn::GetAtt" : [
                                                    "sqlExpress",
                                                    "Endpoint.Port"
                                                ]
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-account-id\", \"",
                                            {
                                                "Ref" : "AWS::AccountId"
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-region\", \"",
                                            {
                                                "Ref" : "AWS::Region"
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-version\", \"1.0\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-product-name\", \"Evaluate for Amazon Connect\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-root-path\", \"evaluate\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-ad-domain\", \"",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-es-url\", \"",
                                            {                                               
                                               "Ref" : "ESDomain"
                                            },
                                            "\", \"Machine\")\n",
                                            "[Environment]::SetEnvironmentVariable(\"q-deployment-id\", \"",
                                            "$([guid]::NewGuid().Guid)",
                                            "\", \"Machine\")\n",
                                            "$adDomain = \"",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            "\" \n",
                                            "$adDomain = [environment]::GetEnvironmentVariable(\"q-ad-domain\", \"Machine\") \n",
                                            "$adList = $adDomain -Split \".\", 0, \"simplematch\"  \n",
                                            "If (($adList.Count -lt 2) -or ($adList.Count -gt 6)) { \n",
                                            "    Write-Error \"Domain: '$adDomain' must be at least 'domainname.tld' or supports up to 6 DC's e.g. 'dc6.dc5.dc4.dc3.dc2.dc1\"  \n",
                                            "} Else { \n",
                                            "    [array]::Reverse($adList) \n",
                                            "    $output = \"\" \n",
                                            "    for ($i=0; $i -lt $adList.Length; $i++) { \n",
                                            "       $key = \"q-ad-part-$($i + 1)\" \n",
                                            "       $value = $adList[$i] \n",
                                            "       [Environment]::SetEnvironmentVariable(\"$key\", \"$value\" , \"Machine\") \n",
                                            "       Write-Host \"Key: '$key', Value = '$value'\" \n",
                                            "       $output = \"DC=$($value),$($output)\"  \n",
                                            "    } \n",
                                            " \n",
                                            "    Write-Host $output.Substring(0, $output.Length - 1) \n",
                                            "} \n",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\install-join-ad.ps1"               : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [                                           
                                            "### Join the domain...\n",
                                            "$computer = Get-WmiObject -Class Win32_ComputerSystem \n",
                                            "if ($computer.domain -eq 'WORKGROUP') { \n",
                                            "  $adapter = Get-NetAdapter -Name 'Ethernet*'\n",
                                            "  Set-DNSClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses ('",
                                            {
                                                "Fn::Select" : [
                                                    "0",
                                                    {
                                                        "Fn::Split" : [
                                                            ",",
                                                            {
                                                                "Ref" : "DomainIPs"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "','",
                                            {
                                                "Fn::Select" : [
                                                    "1",
                                                    {
                                                        "Fn::Split" : [
                                                            ",",
                                                            {
                                                                "Ref" : "DomainIPs"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "')\n",
                                            "  $domain = '",
                                            {
                                                "Ref" : "DomainDNSName"
                                            },
                                            "'\n",
                                            "  $password = '",
                                            {
                                                "Ref" : "DomainAdminPassword"
                                            },
                                            "' | ConvertTo-SecureString -asPlainText -Force \n",
                                            "  $Administrator = '",
                                            {
                                                "Ref" : "DomainNetBiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref" : "DomainAdminUser"
                                            },
                                            "'\n",
                                            "  $credential = New-Object System.Management.Automation.PSCredential($Administrator,$password) \n",
                                            "  Add-Computer -DomainName $domain -Credential $credential -restart \n",
                                            "}\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands" : {
                            "5-install-environment-variables" : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\install-environment-variables.ps1 \n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "6-install-firewall-rules"        : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\install-firewall-rules.ps1 \n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "7-install-create-group"          : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\install-group.ps1 \n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "0"
                            },
                            "8-install-database"              : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\install-database.ps1 \n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "5"
                            },
                            "9-install-join-ad"               : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\install-join-ad.ps1 \n"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion" : "forever"
                            },
                            "10-signal-success"               : {
                                "command" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0 --stack ",
                                            {
                                                "Ref" : "AWS::StackName"
                                            },
                                            " --resource windowsServer --region ",
                                            {
                                                "Ref" : "AWS::Region"
                                            }
                                        ]
                                    ]
                                }
                            }
                        },
                        "services" : {
                            "windows" : {
                                "cfn-hup" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files"         : [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "IamInstanceProfile" : {
                    "Ref" : "rootInstanceProfile"
                },
                "Tags"               : [
                    {
                        "Key" : "APP-NAME",
                        "Value" : "E4AC"
                    },
                    {
                        "Key" : "VENDOR",
                        "Value" : "Qualtrak"
                    },
                    {
                        "Key" : "STAGE",
                        "Value" : "Production"
                    }
                ],
                "ImageId"            : {
                    "Fn::FindInMap" : [
                        "AWSRegion2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        "Windows2016DevAMI"
                    ]
                },
                "InstanceType"       : {
                    "Ref" : "InstanceType"
                },
                "KeyName"            : {
                    "Ref" : "KeyName"
                },
                "UserData"           : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "<script> \n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref" : "AWS::StackName"
                                },
                                " -r windowsServer ",
                                " --region ",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                "\n",
                                "</script> \n"
                            ]
                        ]
                    }
                },
                "NetworkInterfaces"  : [
                    {
                        "NetworkInterfaceId" : {
                            "Ref" : "webXface"
                        },
                        "DeviceIndex"        : "0"
                    }
                ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT30M"
                }
            }
        },
        "S3BucketNameEvaluateRetain" : {
            "Type" : "AWS::S3::Bucket",
            "DeletionPolicy" : "Retain",
            "Condition"      : "RetainEvaluateS3",
            "Properties"     : {
                "AccessControl" : "BucketOwnerFullControl",
                "BucketName"    : {
                    "Fn::Join" : [
                        "",
                        [
                            "evaluate-",
                            {
                                "Ref" : "AWS::AccountId"
                            },
                            "-",
                            {
                                "Ref" : "S3EvaluateBucket"
                            }
                        ]
                    ]
                },
                "Tags"          : [
                    {
                        "Key" : "APP-NAME",
                        "Value" : "E4AC"
                    },
                    {
                        "Key" : "VENDOR",
                        "Value" : "Qualtrak"
                    },
                    {
                        "Key" : "STAGE",
                        "Value" : "Production"
                    }
                ]
            }
        },
        "S3BucketNameEvaluateDelete" : {
            "Type" : "AWS::S3::Bucket",
            "DeletionPolicy" : "Delete",
            "Condition"      : "DeleteEvaluateS3",
            "Properties"     : {
                "AccessControl" : "BucketOwnerFullControl",
                "BucketName"    : {
                    "Fn::Join" : [
                        "",
                        [
                            "evaluate-",
                            {
                                "Ref" : "AWS::AccountId"
                            },
                            "-",
                            {
                                "Ref" : "S3EvaluateBucket"
                            }
                        ]
                    ]
                },
                "Tags"          : [
                    {
                        "Key" : "APP-NAME",
                        "Value" : "E4AC"
                    },
                    {
                        "Key" : "VENDOR",
                        "Value" : "Qualtrak"
                    },
                    {
                        "Key" : "STAGE",
                        "Value" : "Production"
                    }
                ]
            }
        }
    },
    "Outputs"                  : {
        "PrivateIp" : {
            "Description" : "Private Ip Address",
            "Value"       : {
                "Fn::GetAtt" : [
                    "windowsServer",
                    "PrivateIp"
                ]
            }
        },
        "PublicIp"  : {
            "Description" : "Public Ip Address",
            "Value"       : {
                "Fn::GetAtt" : [
                    "windowsServer",
                    "PublicIp"
                ]
            }
        },
        "EvaluateUrl" : {
            "Description" : "Url for Evaluate for Amazon Connect web application (Active Directory)",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        {
                            "Fn::GetAtt" : [
                                "windowsServer",
                                "PublicDnsName"
                            ]
                        },
                        "/evaluate"
                    ]
                ]
            }
        },
        "TlmUrl"      : {
            "Description" : "Url for Tenant Management System web application (Windows Authentication)",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        {
                            "Fn::GetAtt" : [
                                "windowsServer",
                                "PublicDnsName"
                            ]
                        },
                        "/tlm"
                    ]
                ]
            }
        },
        "ClusterStatusUrl" : {
            "Description" : "Url for Cluster Status web application (Windows Authentication)",
            "Value"       : {
                "Fn::Join" : [
                    "",
                    [
                        {
                            "Fn::GetAtt" : [
                                "windowsServer",
                                "PublicDnsName"
                            ]
                        },
                        "/status"
                    ]
                ]
            }
        }
    }
}